{
	"info": {
		"_postman_id": "46460bad-eaec-4d3d-b6a9-37836ceda268",
		"name": "CustomerOrder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17989700"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var val = Math.floor(100000 + Math.random() * 900000);",
							"pm.environment.set('email','sathish'+val+'@chewy.com');",
							"pm.environment.set('name','sathish'+val);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('status code is 201', () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test('validate userid', () => {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.userId).to.be.greaterThan(0);",
							"    pm.environment.set('user_id', responseJson.userId);",
							"    console.log(pm.environment.get('user_id'));",
							"});",
							"pm.test(\"Response time is less than 7000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(7000);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"fullName\": \"Sathish Palanisamy\",\n    \"password\": \"password\",\n    \"loginId\": {{email}},\n    \"email\": {{email}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/g/api/user/",
					"host": [
						"{{url}}"
					],
					"path": [
						"g",
						"api",
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseJson;",
							"pm.test('status code is 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('validate userid', () => {",
							"    responseJson = pm.response.json();",
							"    pm.expect(responseJson.userId).to.eql(pm.environment.get('user_id'));",
							"    console.log(pm.environment.get('user_id'));",
							"});",
							"pm.test('Ensure business page url is empty for the user', () => {",
							"    pm.expect(responseJson.businessPageUrl).to.eq(\"\");",
							"});",
							"pm.test(\"Response time is less than 1000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"loginId\": {{email}},\n    \"password\": \"password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/g/api/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"g",
						"api",
						"login"
					]
				},
				"description": "get user id for the given username and password"
			},
			"response": []
		},
		{
			"name": "generateKyriosToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseJson = pm.response.json();",
							"pm.environment.set(\"kyrios_access_token\", responseJson.access_token);",
							"pm.environment.set(\"refresh_token\", responseJson.refresh_token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "cecce1bf-df52-4d4c-9bc9-f89cd022c2ad",
							"type": "string"
						},
						{
							"key": "username",
							"value": "shelter-service-client",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "api",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{token-url}}",
					"host": [
						"{{token-url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "addAddresstoAddressBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"let responseJson = pm.response.json();",
							"",
							"pm.test('get kyrios id', () => {",
							"    pm.environment.set('kyrios_Id',responseJson.id);",
							"    console.log(pm.environment.get('kyrios_Id'));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\");",
							"var streetAddress = pm.variables.replaceIn(\"{{$randomStreetAddress}}\");",
							"var phNumber = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\");",
							"pm.environment.set('firstName', firstName);",
							"pm.environment.set('lastName', lastName);",
							"pm.environment.set('streetAddress', streetAddress);",
							"pm.environment.set('phNumber', phNumber);",
							"pm.environment.set('fullName',firstName + ' '+lastName);",
							"console.log(pm.environment.get('firstName'));",
							"console.log(pm.environment.get('lastName'));",
							"console.log(pm.environment.get('streetAddress'));",
							"console.log(pm.environment.get('phNumber'));",
							"console.log(pm.environment.get('fullName'));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "donationorgid",
						"value": "74084228",
						"type": "text",
						"disabled": true
					},
					{
						"key": "account",
						"value": "881566371",
						"type": "text",
						"disabled": true
					},
					{
						"key": "x-submitter-id",
						"value": "{{user_id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{kyrios_access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"city\": \"Redmond\",\n    \"country\": \"US\",\n    \"street1\": \"{{streetAddress}}\",\n    \"street2\": \"APT 5\",\n    \"state\": \"WA\",\n    \"postcode\": \"98052\",\n    \"phone1\": \"{{phNumber}}\",\n    \"memberId\": {{user_id}},\n    \"type\": \"SB\",\n    \"status\": \"P\",\n    \"nickname\": \"Sathish Palanisamy\",\n    \"primaryAddress\": true,\n    \"fullName\": \"{{fullName}}\",\n    \"isVerified\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{kyrios-url}}/v2/addresses",
					"host": [
						"{{kyrios-url}}"
					],
					"path": [
						"v2",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "generateGraphQLToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);",
							"pm.environment.set(\"graphql_access_token\", data.access_token);",
							"pm.environment.set(\"refresh_token\", data.refresh_token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "411fe163-3857-4d4e-8da2-73caf3ebf456",
							"type": "string"
						},
						{
							"key": "username",
							"value": "checkout-service-client",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{token-url}}",
					"host": [
						"{{token-url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "graphQLOrderIDCreation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"let responseJson = pm.response.json();",
							"",
							"pm.test('get new order Id', function ()  {",
							"    pm.environment.set('orderId', responseJson.data.newOrderExternalId.value.toString());",
							"    console.log(pm.environment.get('orderId'));",
							"    /*pm.environment.set('orderId', parseInt(pm.environment.get('orderId')));",
							"    console.log(pm.environment.get('orderId').toString());*/",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{graphql_access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query newOrderExternalId {\n    newOrderExternalId {\n        value\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{order-url}}/graphql",
					"host": [
						"{{order-url}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "generateOrderServiceToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);",
							"pm.environment.set(\"orderService_access_token\", data.access_token);",
							"pm.environment.set(\"refresh_token\", data.refresh_token);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "checkout-service-client",
							"type": "string"
						},
						{
							"key": "password",
							"value": "411fe163-3857-4d4e-8da2-73caf3ebf456",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "scope",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{token-url}}",
					"host": [
						"{{token-url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "OrderService",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseJson = pm.response.json();",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('Validate order detials', async () => {",
							"    pm.expect(responseJson.order.externalOrderId).to.eql(pm.environment.get('orderId'));",
							"    pm.expect(responseJson.order.memberId).to.eq(pm.environment.get('user_id'));",
							"    pm.expect(responseJson.order.email).to.eq(pm.environment.get('email'));",
							"    pm.expect(responseJson.order.status).to.eq('SUBMITTED');",
							"    pm.expect(responseJson.status).to.eq('SUCCESS');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Caller-Id",
						"value": "881566371",
						"type": "text"
					},
					{
						"key": "X-Request-Id",
						"value": "2324343454",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{orderService_access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"businessChannel\": \"WEB\",\n    \"externalOrderId\": \"{{orderId}}\",\n    \"currency\": \"USD\",\n    \"email1\": \"{{email}}\",\n    \"expectedFulfillmentDate\": \"2022-08-07T16:15:53.523Z\",\n    \"lineItems\": [\n        {\n            \"appointmentDate\": \"2022-08-07T16:15:53.523Z\",\n            \"autoAdd\": true,\n            \"currency\": \"USD\",\n            \"fulfillmentCenter\": \"AVP1\",\n            \"lineNumber\": 1,\n            \"product\": {\n                \"bundleTitle\": \"test\",\n                \"catalogEntryId\": \"113298\",\n                \"description\": \"test\",\n                \"name\": \"test\",\n                \"partNumber\": \"113298\"\n            },\n            \"quantity\": 1,\n            \"salesTax\": {\n                \"currency\": \"USD\",\n                \"value\": \"0.00\"\n            },\n            \"shippingAddress\": {\n                \"addressLine1\": \"{{streetAddress}}\",\n                \"addressLine2\": \"APT 5\",\n                \"city\": \"Redmond\",\n                \"country\": \"US\",\n                \"firstName\": \"{{firstName}}\",\n                \"fullName\": \"{{fullName}}\",\n                \"kyriosId\": \"{{kyrios_Id}}\",\n                \"lastName\": \"{{lastName}}\",\n                \"nickname\": \"sathish423046\",\n                \"phone\": \"{{phNumber}}\",\n                \"postcode\": \"98052\",\n                \"state\": \"WA\",\n                \"verificationStatus\": \"PAYPAL_VERIFIED\"\n            },\n            \"shippingCharge\": {\n                \"currency\": \"USD\",\n                \"value\": \"0.00\"\n            },\n            \"shippingModeCode\": \"FLATRATE\",\n            \"shippingTax\": {\n                \"currency\": \"USD\",\n                \"value\": \"0.00\"\n            },\n            \"totalProduct\": {\n                \"currency\": \"USD\",\n                \"value\": \"25.00\"\n            },\n            \"unitPrice\": {\n                \"currency\": \"USD\",\n                \"value\": \"25.00\"\n            }\n        }\n    ],\n    \"memberId\": \"{{user_id}}\",\n    \"orsVersion\": \"ORS_1_0\",\n    \"overrideIfOrderExists\": false,\n    \"paymentGateway\": true,\n    \"paymentInstructions\": [\n        {\n            \"amount\": {\n                \"currency\": \"USD\",\n                \"value\": \"25.00\"\n            },\n            \"billingAddress\": {\n                \"addressLine1\": \"{{streetAddress}}\",\n                \"addressLine2\": \"APT 5\",\n                \"city\": \"Redmond\",\n                \"country\": \"US\",\n                \"firstName\": \"{{firstName}}\",\n                \"fullName\": \"{{fullName}}\",\n                \"kyriosId\": \"{{kyrios_Id}}\",\n                \"lastName\": \"{{lastName}}\",\n                \"nickname\": \"sathish423046\",\n                \"phone\": \"{{phNumber}}\",\n                \"postcode\": \"98052\",\n                \"state\": \"WA\",\n                \"verificationStatus\": \"PAYPAL_VERIFIED\"\n            },\n            \"payRefId\": \"21056b79-9612-41a0-a018-52a5e9023680\",\n            \"paymentMethodType\": \"PAYPAL\",\n            \"walletId\": \"fa823264-606e-4a87-8cda-8ab7a77941cc\",\n            \"walletPayMethodId\": \"21056b79-9612-41a0-a018-52a5e9023680\"\n        }\n    ],\n    \"shippingAddress\": {\n        \"addressLine1\": \"{{streetAddress}}\",\n        \"addressLine2\": \"APT 5\",\n        \"city\": \"Redmond\",\n        \"country\": \"US\",\n        \"firstName\": \"{{firstName}}\",\n        \"fullName\": \"{{fullName}}\",\n        \"kyriosId\": \"{{kyrios_Id}}\",\n        \"lastName\": \"{{lastName}}\",\n        \"nickname\": \"sathish423046\",\n        \"phone\": \"{{phNumber}}\",\n        \"postcode\": \"98052\",\n        \"state\": \"WA\",\n        \"verificationStatus\": \"PAYPAL_VERIFIED\"\n    },\n    \"submitter\": \"CUSTOMER\",\n    \"submitterId\": \"881566371\",\n    \"timePlaced\": \"2022-08-12T16:15:53.523Z\",\n    \"timeUpdated\": \"2022-08-12T16:15:53.523Z\",\n    \"total\": {\n        \"currency\": \"USD\",\n        \"value\": \"25.00\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://order-api-us-east-1.opta.stg.aws.chewy.cloud/api/v1/orders",
					"protocol": "https",
					"host": [
						"order-api-us-east-1",
						"opta",
						"stg",
						"aws",
						"chewy",
						"cloud"
					],
					"path": [
						"api",
						"v1",
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "graphQLGetOrderByOrderId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"let responseJson = pm.response.json();",
							"",
							"pm.test('validate respone', function ()  {",
							"    pm.expect(responseJson.data.byOrderId.externalOrderId).to.eql(pm.environment.get('orderId'));",
							"    /*pm.environment.set('orderId', parseInt(pm.environment.get('orderId')));",
							"    console.log(pm.environment.get('orderId').toString());*/",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{graphql_access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query OrderIdQuery {\n    byOrderId(externalOrderId:\"{{orderId}}\") {\n        externalOrderId\n        id\n        legacyId\n        donationOrgId\n        fraudReason\n        orderComments{\n            id\n            text\n            timestamp\n            userId\n        }\n        lineItems {\n                id\n                legacyId\n                status\n                prepareFlags\n                quantity\n                totalProduct {\n                    value\n                }\n                lineItemDiscountAdjustmentTotal{\n                    currency\n                    value\n                }\n                timeCreated\n                product {\n                    partNumber\n                    catalogEntryId\n                    description\n                }\n                timeReleased\n                timeUpdated\n                timeShipped\n                wishListId\n                electronicGiftCardIds\n            }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{order-url}}/graphql",
					"host": [
						"{{order-url}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "graphQLgetOrdersByMemberID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"let responseJson = pm.response.json();",
							"",
							"pm.test('Validate Response', function ()  {",
							"   pm.expect(responseJson.data.searchOrders.results[0].externalOrderId).to.eql(pm.environment.get('orderId'));",
							"   });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{graphql_access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getOrders {\n      searchOrders(criteria: {memberId: \"{{user_id}}\"},\n      page: { page: 0,\n      pageLimit: 1 }) {\n        results {\n          externalOrderId\n        }\n      }\n    }",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{order-url}}/graphql",
					"host": [
						"{{order-url}}"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}